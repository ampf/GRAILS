/*******************************************************************************
 * Copyright (c) 2010 Appscio, Inc. All rights reserved. This program and the accompanying materials are made available under your choice of the GNU Lesser Public License v2.1 or  the Apache License, Version 2.0. See the included License-dual file.
 ******************************************************************************/

/*
 * data holder app-server side track the remote detector process
 */
package com.appscio.mpf.grails.core;

import java.util.Date;
import org.codehaus.groovy.grails.commons.*


class MpfDetector {
    /**
     * the current runtime java.lang.Process object for the detector (transient)
     */
    def proc

    /**
     * When the task was dispatched to an MpfExecTgt
     */
    Date    launchDate

    int     mpfTaskId =1
    def config = ConfigurationHolder.config

    /**
     * Utility function to let the detector define where to look for the Detector's runtime.
     * @deprecated  in favor of the Places utility class
     * @see <code>com.appscio.mpf.utility.Places</code>
     * @return String value of MPF_DETECTORS_HOME
     */
    @Deprecated
    String  getMPF_DETECTORS_HOME(){
        // TODO this should use com.appscio.mpf.utilty.Places.getInteresting
        Map env = System.getenv()
        def mpfdh = env["MPF_DETECTORS_HOME"] ?:
                        env['APPSCIO_HOME'] ?
                           env['APPSCIO_HOME']+'/detectors' :
                           "/usr/share/appscio/detectors"

        log.info "resolving MPF_DETECTORS_HOME to ${mpfdh}"
        return mpfdh
    }

    /**
     * Prettyprint closure (take a report text and print nicely)
     * @deprecated  Intent was to have the base prettyprint mechanism be a Closure, but for override simplicity it should be a method
     */
    @Deprecated
    def pp = {it}


    /**
     * Take in a string (the text returned by the Detectors launched by an instance of that MpfDetector subclass),
     * determine if it contains any events of interest, and return a list MpfEvents. Examples are provided in the
     * FooMpfDetector.groovy file generated by 'grails create-mpf-detector Foo'
     * @param report the text string to be parsed
     * @return a list of MpfEvents (possibly empty)
     */
    def parseReport(report){ return []}

    /**
     * Pass a list of hints for the UI creating or editing a task using this detector.
     * The prefix is used in the detector as key/value environment variables.
     * Each entry in the list may be a string (the prefix key), or a map:
     *    [key:'count',help:'sets number of events to generate',default:'3']
     * If default is non-blank, and no override is provided by the UI (user) 
     * then the key is added to the task at dispatch time, with the provided value.
     * Limitations on the values (type, legal settings, etc) should be in the 'help'
     */
    def DETECTOR_PREFIX_FOR_UI = []
                                  
    /**
     * per-Detector timeout for the runtime Detector (on an MpfExecTgt)
     */
    def TIMEOUT_SECONDS = 10  // default

}
